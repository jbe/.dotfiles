#!/usr/bin/env ruby
#
# ORIGIN -- manage origin repositories

def nasty_require(*gems)
  gems.map(&:to_s).each do |gem|
    begin
      require gem
    rescue LoadError
      puts " > installing # {gem}"
      system "gem install #{gem}"
      require gem
    end
  end
end

nasty_require :thor
require 'fileutils'

ORIGINS = File.join Dir.home, 'origins'

FileUtils.mkdir_p(ORIGINS)

def path(*parts)
  File.join(*([ORIGINS] + parts))
end

class Origin < Thor
  desc 'mote HOST NAME', 'add a remote origin'
  def mote(host, name)
    system "git remote add origin #{host}:#{path(name)} && git push --set-upstream origin master"
  end

  desc 'clone HOST NAME', 'clone something from the origin server'
  def clone(host, name)
    system "git clone #{host}:#{path(name)}"
  end

  desc 'mk NAMES...', 'create a new repository'
  def mk(*names)
    names.each do |name|
      full = path(name)
      if File.directory? full
        puts "#{full} already exists on #{`hostname`.rstrip}"
      else
        system "cd #{ORIGINS} && git init --bare #{name}"
      end
    end
  end

  desc 'rm NAME', 'delete an existing repository'
  def rm(name)
    full = path(name)
    if File.directory? full
      puts "About to delete #{full} from #{`hostname`.rstrip} (y/N)?"
      FileUtils.rm_rf(full) if /^y/ =~ STDIN.gets
    else
      puts "#{name} does not exist on #{`hostname`.rstrip}"
    end
  end

  desc 'mv NAME', 'delete an existing repository'
  def mv(from, to)
    full_from = path(from)
    full_to   = path(to)
    if File.directory? full_from
      puts "About to move #{full_from} to #{full_to} on #{`hostname`.rstrip} (y/N)?"
      FileUtils.mv(full_from, full_to) if /^y/ =~ STDIN.gets
    else
      puts "#{name} does not exist on #{`hostname`.rstrip}"
    end
  end

  desc 'ls', 'list all central repositories'
  def ls
    system 'ls', '-Ah', ORIGINS
  end
end

Origin.start ARGV
